 public void initialize(URL url, ResourceBundle rb) {
       Platform.runLater(new Runnable() {
            @Override
            public void run() {
                txtSearch.requestFocus();
            }
        });
        set_accordian(rectangle2D);
        load_titled_pane_icon();
        set_buttons();
        set_table();
        populate_table();
        listner_boolean();
        listner_search();
        listner_adv_search_Bill();
        listner_radio_selection();
        listner_adv_search_name();
        listner_adv_search_date();
        setLayout();
        tpTable.setText(tblView.getItems().size() + " Bills Found");
        tblView.itemsProperty().addListener(new ChangeListener<ObservableList<objtbl>>() {
            @Override
            public void changed(ObservableValue<? extends ObservableList<objtbl>> ov, ObservableList<objtbl> t, ObservableList<objtbl> t1) {
                tpTable.setText(tblView.getItems().size() + " Bills  Found");
            }
        });
        doubleClickTableEdit();
        enterKeyEventOnTableView();
    }    
    
    private void load_titled_pane_icon() {
        accrSearch.setExpandedPane(tpSearch);
        tpSearch.setAnimated(true);
        tpTable.setAnimated(true);
        accr_option.setExpandedPane(tp_options);
        accrtable.setExpandedPane(tpTable);
        tpSearch.setAnimated(true);
        
    }
    
    private void set_accordian(Rectangle2D rectangle2D1) {
        accrSearch.setPrefWidth(rectangle2D1.getWidth() - anchr_options.getPrefWidth());
        accrtable.setPrefWidth(rectangle2D1.getWidth() - anchr_options.getPrefWidth());
        tpSearch.setGraphic(new ImageView(new Image("/res/1384536324_Search.png", 24, 24, true, true)));
        tp_options.setGraphic(new ImageView(new Image("/res/1385471310_order-1.png", 24, 24, true, true)));
    }

    private void set_buttons() {
        dpDate.setValue(LocalDate.now());
        btnHide.setVisible(true);
        btnShow.setVisible(false);
        rbtall.setSelected(true);
        rbtsales.setSelected(true);
    }
    
    private void SalesControllerActionIdentified(String type, String id, String mode) {
        if (!stage_add_sales.isShowing()) {
            stage_add_sales = new Stage(StageStyle.UTILITY);
            stage_add_sales.initOwner(stage);
            stage_add_sales.initModality(Modality.WINDOW_MODAL);
            try {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("Create_Sales.fxml"));
                Parent root = (Parent) loader.load();
                Create_SalesController csc = loader.getController();
                Scene scene = new Scene(root);
                stage_add_sales.setScene(scene);
                stage_add_sales.setResizable(false);
                stage_add_sales.setTitle("Add Sales");
                csc.setStage(stage_add_sales);
                stage_add_sales.show();
                if (type.equalsIgnoreCase("Return")) {
                    stage_add_sales.setTitle("Sales Return");
                    csc.fetch_for_update( id,type, mode);
                } else if (type.equalsIgnoreCase("Add")) {
                }else if (type.equalsIgnoreCase("View")) {
                    csc.fetch_for_update(id,type,mode);
                    stage_add_sales.setTitle("Sales View");
                }
            } catch (IOException ex) {
                Logger.getLogger(SalesMasterController.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 

    }
    
    private void set_table() {
        colbill.setCellValueFactory(new PropertyValueFactory<objtbl, String>("bill"));
        coldate.setCellValueFactory(new PropertyValueFactory<objtbl, String>("date"));
        coltime.setCellValueFactory(new PropertyValueFactory<objtbl, String>("time"));
        colname.setCellValueFactory(new PropertyValueFactory<objtbl, String>("name"));
        colitem.setCellValueFactory(new PropertyValueFactory<objtbl, String>("items"));
        colqty.setCellValueFactory(new PropertyValueFactory<objtbl, String>("qty"));
        coltot.setCellValueFactory(new PropertyValueFactory<objtbl, String>("tot"));
        colgst.setCellValueFactory(new PropertyValueFactory<objtbl, String>("gst"));
        colnet.setCellValueFactory(new PropertyValueFactory<objtbl, String>("net"));
        coltype.setCellValueFactory(new PropertyValueFactory<objtbl, String>("type"));
        table_data.add(new objtbl("", "", "", "", "", "", "","","",""));
        tblView.setItems(table_data);

    }

    public void populate_table() {
        table_data.removeAll(table_data);
        String status = "";
        try {
            Statement st = db.con.createStatement();
            System.out.println("select billno, date,time , client, items,qty,grand,gst,netamt,type from " + db.schema + ".tbl_bill where date='"+dpDate.getValue()+"' and status  = 1");
            ResultSet rs = st.executeQuery("select billno, date,time , client, items,qty,grand,gst,netamt,type from " + db.schema + ".tbl_bill where date='"+dpDate.getValue()+"' and status  = 1");
            while (rs.next()) {
                
                table_data.add(new objtbl(rs.getString("billno"), rs.getString("date"), rs.getString("time"), rs.getString("client"), rs.getString("items"), rs.getString("qty"),rs.getString("grand"), rs.getString("gst"),rs.getString("netamt") ,rs.getString("type")));
            }
            st.close();
        }
        catch (SQLException ex) {
            Logger.getLogger(SalesMasterController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void listner_boolean() {
        boolean_status.addListener(new ChangeListener<Boolean>() {
            @Override
            public void changed(ObservableValue<? extends Boolean> ov, Boolean t, Boolean t1) {
                populate_table();
            }
        });
    }

    public void clear() {
        txtSearch.clear();
        txtbillno.clear();
        txtagent.clear();
        txtclient.clear();
        dpDate.setValue(LocalDate.now());
        rbtsales.setSelected(true);
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                txtSearch.requestFocus();
            }
        });
        populate_table();
    }

    
    private void listner_search() {
        txtSearch.textProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> ov, String t, String t1) {
                table_data_search.removeAll(table_data_search);
                String text = txtSearch.getText();
                if (text.equals("")) {
                    tblView.setItems(table_data);
                }
                else {
                    for (objtbl obj : table_data) {
                        if (obj.getBill().toLowerCase().contains(text.toLowerCase()) || obj.getName().toLowerCase().contains(text.toLowerCase()) ) {
                            table_data_search.add(obj);
                        }
                    }
                    tblView.setItems(table_data_search);
                    tpTable.setText(tblView.getItems().size() + " Bills Found");
                }
            }
        });
    }

    private void listner_adv_search_Bill() {
        txtbillno.textProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> ov, String t, String t1) {
                table_data_search.removeAll(table_data_search);
                String text = txtbillno.getText();
                if (text.equals("")) {
                    tblView.setItems(table_data);
                }
                else {
                    for (objtbl obj : table_data) {
                        if (obj.getBill().toLowerCase().contains(text.toLowerCase())) {
                            table_data_search.add(obj);
                        }
                    }
                    tblView.setItems(table_data_search);
                    tpTable.setText(tblView.getItems().size() + " Bill Found");
                }
            }
        });
    }

  private void listner_radio_selection() {
        ToggleGroup grp =new ToggleGroup();
        rbtretail.setToggleGroup(grp);
        rbtwholesale.setToggleGroup(grp);
        rbtall.setToggleGroup(grp);
        ToggleGroup grp2 =new ToggleGroup();
        rbtsales.setToggleGroup(grp2);
        rbtreturn.setToggleGroup(grp2);
        grp.selectedToggleProperty().addListener(new ChangeListener<Toggle>() {
            @Override
            public void changed(ObservableValue<? extends Toggle> ov, Toggle t, Toggle t1) {

                    if(rbtretail.isSelected()){
                        populate_tbl_retail();
                        tpTable.setText(table_data.size() + " Bills Found");
                    }else if(rbtwholesale.isSelected()){
                        populate_tbl_whole();
                        tpTable.setText(table_data.size() + " Bills Found");
                    }else if (rbtall.isSelected()){
                        populate_table();
                        tpTable.setText(table_data.size() + " Bills Found");
                    }
                
            }
        });
    }
    
  private void populate_tbl_retail() {
        table_data.removeAll(table_data);
        String status = "";
        try {
            Statement st = db.con.createStatement();
            System.out.println("select billno, date,time , client, items,qty,grand,gst,netamt,type from " + db.schema + ".tbl_bill where date='"+dpDate.getValue()+"' and type= 'Retail' and status  = 1");
            ResultSet rs = st.executeQuery("select billno, date,time , client, items,qty,grand,gst,netamt,type from " + db.schema + ".tbl_bill where date='"+dpDate.getValue()+"' and type= 'Retail' and status  = 1");
            while (rs.next()) {
                
                table_data.add(new objtbl(rs.getString("billno"), rs.getString("date"), rs.getString("time"), rs.getString("client"), rs.getString("items"), rs.getString("qty"),rs.getString("grand"), rs.getString("gst"),rs.getString("netamt") ,rs.getString("type")));
            }
            st.close();
        }
        catch (SQLException ex) {
            Logger.getLogger(SalesMasterController.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
  
  private void populate_tbl_whole() {
        table_data.removeAll(table_data);
        String status = "";
        try {
            Statement st = db.con.createStatement();
            System.out.println("select billno, date,time , client, items,qty,grand,gst,netamt,type from " + db.schema + ".tbl_bill where date='"+dpDate.getValue()+"' and type= 'Wholesale' and status  = 1");
            ResultSet rs = st.executeQuery("select billno, date,time , client, items,qty,grand,gst,netamt,type from " + db.schema + ".tbl_bill where date='"+dpDate.getValue()+"' and type= 'Wholesale' and status  = 1");
            while (rs.next()) {
                
                table_data.add(new objtbl(rs.getString("billno"), rs.getString("date"), rs.getString("time"), rs.getString("client"), rs.getString("items"), rs.getString("qty"),rs.getString("grand"), rs.getString("gst"),rs.getString("netamt") ,rs.getString("type")));
            }
            st.close();
        }
        catch (SQLException ex) {
            Logger.getLogger(SalesMasterController.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void listner_adv_search_date() {
        dpDate.valueProperty().addListener(new ChangeListener<LocalDate>()  {
            @Override
           public void changed(ObservableValue<? extends LocalDate> observable, LocalDate oldValue, LocalDate newValue) {
                table_data.removeAll(table_data);
        
        try {
            
            String status = "";
        if(rbtall.isSelected()){
            status = "date='"+dpDate.getValue()+"' and status  = 1";
        }else if(rbtretail.isSelected()){
            status = " date='"+dpDate.getValue()+"' and status  = 1 and type ='Retail' ";
        }else if(rbtwholesale.isSelected()){
            status = " date='"+dpDate.getValue()+"' and status  = 1 and type ='Wholesale' ";
        }
            Statement st = db.con.createStatement();
            
            System.out.println("select billno, date,time , client, items,qty,grand,gst,netamt,type from " + db.schema + ".tbl_bill where "+status+"");
            System.out.println("date listner");
            ResultSet rs = st.executeQuery("select billno, date,time , client, items,qty,grand,gst,netamt,type from " + db.schema + ".tbl_bill where "+status+"");
            while (rs.next()) {
                
                table_data.add(new objtbl(rs.getString("billno"), rs.getString("date"), rs.getString("time"), rs.getString("client"), rs.getString("items"), rs.getString("qty"),rs.getString("grand"), rs.getString("gst"),rs.getString("netamt") ,rs.getString("type")));
            }
            st.close();
        }
        catch (SQLException ex) {
            Logger.getLogger(SalesMasterController.class.getName()).log(Level.SEVERE, null, ex);
        }
                      
                    tblView.setItems(table_data_search);
                    tpTable.setText(tblView.getItems().size() + " Bills Found");
                
            }
        });
    }
    
    private void listner_adv_search_name() {
        txtclient.textProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> ov, String t, String t1) {
                table_data_search.removeAll(table_data_search);
                String text = txtclient.getText();
                if (text.equals("")) {
                    tblView.setItems(table_data);
                }
                else {
                    for (objtbl obj : table_data) {
                        if (obj.getName().toLowerCase().contains(text.toLowerCase())) {
                            table_data_search.add(obj);
                        }
                    }
                    tblView.setItems(table_data_search);
                    tpTable.setText(tblView.getItems().size() + " Bill Found");
                }
            }
        });
    }



    private void setLayout() {
        tpSearch.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent t) {
                if (!tpSearch.isExpanded()) {
                    TranslateTransition translateTransition = new TranslateTransition(Duration.millis(500), accrtable);
                    translateTransition.setToY(-210);
                    translateTransition.play();

                    accrtable.setPrefHeight(rectangle2D.getHeight() - anchrAdvSearch.getHeight());
                    tblView.setPrefHeight(rectangle2D.getHeight() -  anchrAdvSearch.getHeight());
                }
                else if (tpSearch.isExpanded()) {
                    if (anchrAdvSearch.getOpacity() == 1) {
                        TranslateTransition translateTransition = new TranslateTransition(Duration.millis(500), accrtable);
                        translateTransition.setToY(0);
                        translateTransition.play();

                        accrtable.setPrefHeight(rectangle2D.getHeight() - 50);
                        tblView.setPrefHeight(rectangle2D.getHeight() - 50);
                    }
                    else if (anchrAdvSearch.getOpacity() == 0) {
                        TranslateTransition translateTransition = new TranslateTransition(Duration.millis(500), accrtable);
                        translateTransition.setToY(-210);
                        translateTransition.play();

                        accrtable.setPrefHeight(rectangle2D.getHeight() - 150);
                        tblView.setPrefHeight(rectangle2D.getHeight() -  150);
                    }
                }
            }
        });
    }

    private boolean delete(String id) {
        try {
                Statement st = db.con.createStatement();
                System.out.println("update " + db.schema + ".tbl_bill set status= 0 where code =  '" + id + "'");
                int bool = st.executeUpdate("update " + db.schema + ".tbl_bill set status= 0 where code = '" + id + "'");
                if (bool > 0) {
                    return true;  
                }
            } catch (SQLException ex) {
                Logger.getLogger(SalesMasterController.class.getName()).log(Level.SEVERE, null, ex);
            }
        return false;
    }

    private void doubleClickTableEdit() {
        tblView.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent t) {
                if (!tblView.getSelectionModel().isEmpty() && t.getClickCount() == 2) {
                    btnEdit.fire();
                }
            }
        });
    }

    private void enterKeyEventOnTableView() {
        tblView.setOnKeyReleased(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent t) {
                if (t.getCode() == KeyCode.ENTER && !tblView.getSelectionModel().isEmpty()) {
                    btnEdit.fire();
                    t.consume();
                }
            }
        });
    }

    @FXML
    private void btnadd_onaction(ActionEvent event) {
        SalesControllerActionIdentified("Add", "","");
    }

    @FXML
    private void btnedit_onaction(ActionEvent event) {
        if (tblView.getSelectionModel().isEmpty()) {
           Alert alert = new Alert(Alert.AlertType.INFORMATION, "Please select a Bill from table!", ButtonType.OK);
                alert.showAndWait();
                if (alert.getResult() == ButtonType.OK) {                  
                    tblView.requestFocus();
                    }    
        }
        
        else {
            String mode="";
            if(rbtsales.isSelected()){
                mode = "Sales";
            } else if(rbtreturn.isSelected()){
                mode ="Returns";
            }
            SalesControllerActionIdentified("View", tblView.getSelectionModel().getSelectedItem().getBill(),mode);
           
        }
        
    }

    @FXML
    private void btndelete_onaction(ActionEvent event) {
        if (tblView.getSelectionModel().isEmpty()) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION, "Please select a Bill from table!", ButtonType.OK);
                alert.showAndWait();
                if (alert.getResult() == ButtonType.OK) {                  
                    tblView.requestFocus();
                    }           
        }
        else {
             Alert alert = new Alert(Alert.AlertType.INFORMATION, "Are you sure you want to Delete Bill!", ButtonType.YES,ButtonType.NO);
                alert.showAndWait();
                if (alert.getResult() == ButtonType.YES) {
                   if (delete(tblView.getSelectionModel().getSelectedItem().getBill())) {
                    Alert alert1 = new Alert(Alert.AlertType.INFORMATION, "Bill Deleted Sucessfully", ButtonType.OK);
                    alert1.showAndWait();
                    boolean_status.setValue(!boolean_status.getValue());
                }           
                    }
        }
    }

    @FXML
    private void btnprint_onaction(ActionEvent event) {
    }

    @FXML
    private void btnshow_onaction(ActionEvent event) {
        btnHide.setVisible(true);
        btnShow.setVisible(false);
        txtbillno.requestFocus();

        FadeTransition fadeTransition = new FadeTransition(Duration.seconds(1), anchrAdvSearch);
        fadeTransition.setFromValue(0);
        fadeTransition.setToValue(1);

        TranslateTransition translateTransition = new TranslateTransition(Duration.seconds(1), accrtable);
        translateTransition.setFromY(accrtable.getTranslateY());
        translateTransition.setToY(0);

        ParallelTransition parallelTransition = new ParallelTransition();
        parallelTransition.getChildren().addAll(fadeTransition, translateTransition);
        parallelTransition.play();

        accrtable.setPrefHeight(rectangle2D.getHeight() - 50);
        tblView.setPrefHeight(rectangle2D.getHeight() - 50);
    }

    @FXML
    private void btnhide_onaction(ActionEvent event) {
        btnHide.setVisible(false);
        btnShow.setVisible(true);
        txtSearch.requestFocus();

        FadeTransition fadeTransition = new FadeTransition(Duration.seconds(1), anchrAdvSearch);
        fadeTransition.setFromValue(1);
        fadeTransition.setToValue(0);

        TranslateTransition translateTransition = new TranslateTransition(Duration.seconds(1), accrtable);
        translateTransition.setFromY(accrtable.getTranslateY());
        translateTransition.setToY(-150);

        ParallelTransition parallelTransition = new ParallelTransition();
        parallelTransition.getChildren().addAll(fadeTransition, translateTransition);
        parallelTransition.play();

        accrtable.setPrefHeight(rectangle2D.getHeight()  - 100);
        tblView.setPrefHeight(rectangle2D.getHeight() -  100);
    }

    @FXML
    private void btnClear_onaction(ActionEvent event) {
        clear();
    }

    @FXML
    private void btnreturn_onaction(ActionEvent event) {
        if (tblView.getSelectionModel().isEmpty()) {
           Alert alert = new Alert(Alert.AlertType.INFORMATION, "Please select a Bill from table!", ButtonType.OK);
                alert.showAndWait();
                if (alert.getResult() == ButtonType.OK) {                  
                    tblView.requestFocus();
                    }    
        }
        
        else {
             String mode="";
            if(rbtsales.isSelected()){
                mode = "Sales";
            } else if(rbtreturn.isSelected()){
                mode ="Returns";
            }
            SalesControllerActionIdentified("Return", tblView.getSelectionModel().getSelectedItem().getBill(),mode);
           
        }
    }

//    public void setStage(Stage stage_sales, Rectangle2D rectangle2D) {
//      this.stage=stage_sales;
//    stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
//            @Override
//            public void handle(WindowEvent t) {
//                t.consume();
//                setFadeOutTransition();
//            }
//        });
//
//        stage.getScene().addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {
//            @Override
//            public void handle(KeyEvent t) {
//                if (t.getCode() == KeyCode.ESCAPE) {
//                    t.consume();
//                    setFadeOutTransition();
//                }
//            }
//        });
//    
//        stage.getScene().addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {
//            @Override
//            public void handle(KeyEvent t) {
//                if (t.getCode() == KeyCode.F5) {
//                    t.consume();
//                    btnadd.fire();
//                }
//            }
//        });       
//        stage.getScene().addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {
//            @Override
//            public void handle(KeyEvent t) {
//                if (t.getCode() == KeyCode.F6) {
//                    t.consume();
//                   btnEdit.fire();
//                }
//            }
//        });           
//        stage.getScene().addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {
//            @Override
//            public void handle(KeyEvent t) {
//                if (t.getCode() == KeyCode.F8) {
//                    t.consume();
//                   btnClear.fire();
//                }
//            }
//        });       
//        stage.getScene().addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {
//            @Override
//            public void handle(KeyEvent t) {
//                if (t.getCode() == KeyCode.F12) {
//                    t.consume();
//                    btnDelete.fire();
//                }
//            }
//        });   
//        stage.getScene().addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {
//            @Override
//            public void handle(KeyEvent t) {
//                if (t.getCode() == KeyCode.F9) {
//                    t.consume();
//                    btnPrint.fire();
//                }
//            }
//        });   
//    }
    
     public void setStage(Stage stage) {
        this.stage = stage;
//        setShortcuts();
    }
    private void setFadeOutTransition() {
        FadeTransition fadeTransition = new FadeTransition(Duration.millis(500), stage.getScene().getRoot());
        fadeTransition.setToValue(0);
        fadeTransition.play();
        fadeTransition.setOnFinished(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent t) {
                stage.close();
            }
        });
    
    }
    
}
